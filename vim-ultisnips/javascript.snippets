# vim: fdm=marker foldlevel=0

# {{{ Imports and requires
# {{{ Imports
snippet iu "@yaguara/utils import statement" b
import * as utils from '@yaguara/utils'
endsnippet

snippet recompose "Import recompose" b
import { compose } from 'recompose'
endsnippet

snippet ira "Import ramda" b
import * as R from 'ramda'
endsnippet

snippet imph "Helmet" b
import Helmet from 'react-helmet'
endsnippet

snippet impc "Redux connect" b
import { connect } from 'react-redux'
endsnippet

snippet imps "Import state" b
import { State } from '../redux'
endsnippet

snippet ig "Import generic" b
import $2 from '$1'
endsnippet

snippet iga "Import generic all" b
import * as $1 from '$2'
endsnippet

snippet ir "Import React" b
import * as React from 'react'
endsnippet

snippet it "Import type" b
import { ${1} } from '@yaguara/ts-types'
endsnippet

snippet ity "Import @yaguara/types" b
import type { ${1} } from '@yaguara/types${0}'
endsnippet
# }}}

# {{{ Requires
snippet ru "Require util" b
const util = require('util')
endsnippet

snippet rra "Require ramda" b
const R = require('ramda')
endsnippet

snippet rg "Require generic" b
const $1 = require('$2')
endsnippet

snippet eg "Export generic" b
export { default as $1 } from './$1'
endsnippet
# }}}
# }}}

# {{{ Redux
snippet reduxmapstate "Redux mapStateToProps function" b
const mapStateToProps = (state: State) => ({
  $1
})
endsnippet

snippet reduxmakemapstate "Redux mapStateToProps function" b
const makeMapStateToProps = () {
	const mapStateToProp = (state, props) => ({})
	return mapStateToProps
}
endsnippet
# }}}

snippet todo "TODO" b
// TODO: ${1:desc} `!v strftime("%D %I:%M %p")` `echo $USER`
endsnippet

snippet reduxprops "ReduxProps type" b
type ReduxProps = ReturnType<typeof mapStateToProps>
endsnippet

snippet co "Comment" b
/**
 * $0
 */
endsnippet

snippet of "Open fold" b
// {{{ $0
endsnippet

snippet cf "Close fold" b
// }}}
endsnippet

snippet clo "console.log" b
console.log(${0:${VISUAL:'here'}})
endsnippet

snippet try "Try catch" b
try {
	${1:${VISUAL}}
} catch (err) {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if (${1:Condition}) {
	${0:${VISUAL}}
}
endsnippet

snippet rce "React Component" b
import * as React from 'react'

const ${1:ComponentName} = () => {
	${0:${VISUAL}}
}

export default $1
endsnippet

snippet e "Export" b
export default $1
endsnippet

snippet t "HTML tag"
<${1:div}>${0:${VISUAL:contents}}</${1/([\w.]+).*/$1/}>
endsnippet

snippet te "HTML tag expanded" b
<${1:div}>
	${0:${VISUAL:contents}}
</${1/([\w.]+).*/$1/}>
endsnippet

snippet st "setTimeout" b
setTimeout(function() {
	${1:${VISUAL:contents}}
}, ${0:200});
endsnippet
